# -*- coding: utf-8 -*-
"""Interfaz_oficial.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pym2icE2nquZSC2cchCqv4Qta957DMCy
"""

import streamlit as st
import pandas as pd
from io import BytesIO
import joblib
import pickle
import pyAgrum as gum


# Función para convertir el DataFrame a un archivo Excel en memoria
def to_excel(df):
    output = BytesIO()
    writer = pd.ExcelWriter(output, engine='openpyxl')
    df.to_excel(writer, index=False, sheet_name='Sheet1')
    writer.close()  # Utilizar close en lugar de save
    processed_data = output.getvalue()
    return processed_data

def load_model():
    return joblib.load("Clasificador.pkl")

# Define la función para realizar predicciones
def programa(excel, clasificador):
    # Cargar el archivo Excel en un DataFrame
    dfOriginal = pd.read_excel(excel)
    df = dfOriginal.drop(columns=["ID"])

    # Realizar predicciones
    predicciones = list(clasificador.predict(df))
    predicciones = [int(prediccion) for prediccion in predicciones]

    # Añadir las predicciones al DataFrame original
    dfOriginal["Prediccion"] = predicciones

    return dfOriginal

# Función para predecir a partir de forma individual
def predict_from_inputs(inputs, clasificador, nombre_variables):
    df = pd.DataFrame([inputs], columns=[nombre_variables[i] for i in range(8)])
    prediccion = clasificador.predict(df)
    return int(prediccion[0])


# Cargar el modelo
model = load_model()
listo=False


# Primera sección: Título y descripción
with st.container():
  st.title('Modelo predictivo para la evaluación del deterioro cognitivo en personas mayores')
  st.write('''Descripción: Modelo predictivo basado en redes bayesianas que estima la severidad de la demencia en personas mayores utilizando
   datos neuropsicológicos derivados de una versión reducida del Examen Cognitivo de Addenbrooke III (ACE-III).''')
  st.markdown("---")

# Segunda sección: Manual de cómo usar el archivo
with st.container():
  st.subheader('¿Cómo usar este sistema?')
  st.write('''Para usar el sistema, sólo debe rellenar una planilla excel con la información requerida en caso de que quiera realizar múltiples predicciones. Si desea realizar un predicción individual, rellene las casillas de más abajo. Para un mejor entendimiento,
  por favor ingrese al siguiente link [aquí](https://drive.google.com/drive/folders/1Lc5V29718tc7ICrAkuTklT6AVBVE4Hpj?usp=sharing).''')
  st.markdown('---')

with st.container():
  st.subheader('Red Bayesiana')
  st.write('''A continuación se presenta la red bayesiana de inferencia generada por el algortimo matemático, obteniendo una tasa de aciertos de un 90%.''')

  st.image('Imagen_Red.png', caption='Red Bayesiana', use_column_width=False, width=350)

  st.markdown('---')

# Tercera sección: Predicción individual
with st.container():
    st.header('Predicción individual')
    st.write('Ingrese los valores de las 7 variables binarias (0 o 1):')

    inputs = []
    nombre_variables = ['Año','Miguel2','González2','Avenida2','Imperial2','A682','Caldera2','Copiapo2']
    for i in range(8):
        inputs.append(st.selectbox(f'Variable {nombre_variables[i]}', [0, 1], key=f'input_{i}'))

    if st.button('Realizar predicción'):
        prediccion = predict_from_inputs(inputs, model, nombre_variables)
        st.write(f'La predicción del modelo es nivel: {prediccion} de 3')

# Cuarta sección: Descargar plantilla y cargar información
with st.container():
  st.header('Cargar múltiples registros')
  st.write('Si desea cargar más de 1 registro, para mayor eficiencia, le recomendamos utilizar esta sección:')
  col1, col2 = st.columns(2)
  with col1:
    st.subheader('Plantilla')
    st.write('Descargue la siguiente plantilla y rellene con la información requerida.')

    # Leer el archivo de plantilla
    with open("plantilla.xlsx", "rb") as file:
        plantilla_bytes = file.read()

    # Botón para descargar la plantilla
    st.download_button(
        label="Descargar Plantilla",
        data=plantilla_bytes,
        file_name="plantilla.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

  with col2:
    st.subheader('Cargar archivo')
    st.write('Cargue la plantilla con la información rellenada.')

    # Widget para cargar el archivo
    archivo_cargado = st.file_uploader("Cargar archivo Excel", type=["xlsx"])

    if archivo_cargado is not None:
        listo = True
        # Leer el archivo cargado y mostrar su contenido
        df_cargado = pd.read_excel(archivo_cargado)

  if listo:
    st.write("Contenido del archivo cargado:")
    st.dataframe(df_cargado)


  st.subheader('Resultados')

  if archivo_cargado is not None:
      if st.button('Procesar archivo:'):
          with st.spinner('Procesando el archivo...'):
              df_procesado = programa(archivo_cargado, model)

              st.success(f'Archivo procesado')
              st.write("Contenido del archivo procesado:")
              st.dataframe(df_procesado)

              # Botón para descargar el archivo procesado
              st.download_button(
                  label="Descargar archivo procesado en formato Excel",
                  data=to_excel(df_procesado),
                  file_name='Resultado_RB.xlsx',
                  mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
              )
